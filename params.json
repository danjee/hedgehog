{
  "name": "Hedgehog",
  "tagline": "Sting your regular non container-managed java classes with Spring, Guice and Weld CDI beans",
  "body": "# Hedgehog\r\n\r\n[![Gitter](https://badges.gitter.im/danjee/hedgehog.svg)](https://gitter.im/danjee/hedgehog?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n[![Hex.pm](https://img.shields.io/hexpm/l/plug.svg?maxAge=2592000)]()\r\n[![Stories in Ready](https://badge.waffle.io/danjee/hedgehog.png?label=ready&title=Ready)](https://waffle.io/danjee/hedgehog)\r\n[![Travis CI Build Status](https://travis-ci.org/danjee/hedgehog.png)](https://travis-ci.org/danjee/hedgehog)\r\n[![Coverage Status](https://coveralls.io/repos/github/danjee/hedgehog/badge.svg?branch=master)](https://coveralls.io/github/danjee/hedgehog?branch=master)\r\n[![Maven Central](http://img.shields.io/maven-central/v/ro.fortsoft/hedgehog.svg)](http://search.maven.org/#search|ga|1|ro.fortsoft.hedgehog)\r\n\r\n<!--\r\n[![Issue Stats](http://www.issuestats.com/github/danjee/hedgehog/badge/issue?style=flat)](http://www.issuestats.com/github/danjee/hedgehog)\r\n[![Issue Stats](http://www.issuestats.com/github/danjee/hedgehog/badge/pr?style=flat)](http://www.issuestats.com/github/danjee/hedgehog)\r\n-->\r\n\r\n\r\n\r\n### Hedgehog is a Spring, Guice and Weld CDI bean injector in non-managed business java classes. \r\n\r\n##### Inspired from Wicket injectors\r\n\r\nUse it if you want to inject some managed components in legacy classes or classes that you simple do not want to have it managed like Swing or JavaFX panels. \r\n\r\n## Usage sample:\r\n\r\n### Spring\r\n\r\nUse the maven dependency:\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>ro.fortsoft</groupId>\r\n\t<artifactId>hedgehog-spring</artifactId>\r\n\t<version>0.0.3</version>\r\n</dependency>\r\n```\r\n\r\nThe configuration class, with a sample bean that gets initialized here:\r\n\r\n```java\r\n@Configuration\r\n@ComponentScan(basePackages = \"ro.fortsoft.beans\")\r\npublic class AppConfig {\r\n\r\n\t@Bean\r\n\tpublic Child getChild(){\r\n\t\treturn new Child();\r\n\t}\r\n\r\n}\r\n```\r\n\r\nThe bean definition:\r\n\r\n```java\r\n@Component\r\npublic class Child {\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"I'm a child\";\r\n\t}\r\n}\r\n```\r\nA business panel (non managed bean), this can be any of your legacy classes that you do not want to add them to Spring management:\r\n\r\n```java\r\npublic class Panel {\r\n\r\n\t@Sting\r\n\tprivate Child child;\r\n\t\r\n\tpublic Panel(){\r\n\t\tStinger.get().sting(this);\r\n\t}\r\n\t\r\n\tpublic void test() {\r\n\t\tSystem.out.println(child);\r\n\t}\r\n}\r\n```\r\n\r\nMain class could look like this:\r\n\r\n```java\r\npublic class App implements StingAwareApplication {\r\n\r\n\tprivate MetaDataEntry<Stinger>[] metaData;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\r\n\t\tSpringComponentStinger stinger = new SpringComponentStinger(context);\r\n\t\tApp app = new App();\r\n\t\tstinger.bind(app);\r\n\t\tPanel panel = new Panel();\r\n\t\tpanel.test();\r\n\t}\r\n\r\n\tpublic Stinger getMetaData(MetaDataKey<Stinger> key) {\r\n        return key.get(metaData);\r\n    }\r\n\r\n    public void setMetaData(final MetaDataKey<Stinger> key, final Stinger object) {\r\n        metaData = key.set(metaData, object);\r\n    }\r\n}\r\n```\r\n\r\n### Guice\r\n\r\nUse the maven dependency:\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>ro.fortsoft</groupId>\r\n\t<artifactId>hedgehog-guice</artifactId>\r\n\t<version>0.0.3</version>\r\n</dependency>\r\n```\r\n\r\nThe Guice module class:\r\n\r\n```java\r\npublic class GuiceModule extends AbstractModule {\r\n\r\n\t@Override\r\n\tprotected void configure() {\r\n\t\tbind(ContactService.class).to(InMemoryContactService.class).asEagerSingleton();\r\n\t}\r\n}\r\n```\r\n\r\nThe beans (interface and implementation):\r\n\r\n```java\r\npublic interface ContactService {\r\n\t\r\n\tString add(String word);\r\n\t\r\n\tvoid modify(String word);\r\n\t\r\n\tvoid delete(String word);\r\n}\r\n```\r\n\r\n```java\r\npublic class InMemoryContactService implements ContactService {\r\n\r\n\tpublic String add(String word) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic void modify(String word) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t}\r\n\r\n\tpublic void delete(String word) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t}\r\n}\r\n\r\n```\r\n\r\nA business panel (non managed bean). This could be any of your java classes that you do not want Guice to be aware of them\r\n\r\n```java\r\npublic class Panel {\r\n\r\n\t@Sting\r\n\tprivate ContactService contactService;\r\n\t\r\n\tpublic Panel(){\r\n\t\tStinger.get().sting(this);\r\n\t}\r\n\t\r\n\tpublic void test(){\r\n\t\tSystem.out.println(contactService);\r\n\t}\r\n}\r\n\r\n```\r\n\r\nMain class\r\n```java\r\npublic class App implements StingAwareApplication {\r\n\t\r\n\tprivate MetaDataEntry<Stinger>[] metaData;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t Injector injector = Guice.createInjector(new GuiceModule());\r\n\t\t GuiceComponentsStinger stinger = new GuiceComponentsStinger(injector);\r\n\t\t App app = new App();\r\n\t\t stinger.bind(app);\r\n\t\t Panel panel = new Panel();\r\n\t\t panel.test();\r\n\t}\r\n\r\n\tpublic Stinger getMetaData(MetaDataKey<Stinger> key) {\r\n        return key.get(metaData);\r\n    }\r\n\r\n    public void setMetaData(final MetaDataKey<Stinger> key, final Stinger object) {\r\n        metaData = key.set(metaData, object);\r\n    }\r\n}\r\n```\r\n\r\n### Weld\r\n\r\nUse the maven dependency:\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>ro.fortsoft</groupId>\r\n\t<artifactId>hedgehog-weld</artifactId>\r\n\t<version>0.0.3</version>\r\n</dependency>\r\n```\r\n\r\nThe service class to be injected\r\n\r\n```java\r\npublic class Child {\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"I'm a child\";\r\n\t}\r\n}\r\n```\r\n\r\nA business panel (non managed bean)\r\n\r\n```java\r\npublic class Panel {\r\n\r\n\t@Sting\r\n\tprivate Child child;\r\n\t\r\n\tpublic Panel(){\r\n\t\tStinger.get().sting(this);\r\n\t}\r\n\t\r\n\tpublic void test() {\r\n\t\tSystem.out.println(child);\r\n\t}\r\n}\r\n```\r\n\r\nMain class, this should print the `I'm a child` because the injection succeeded:\r\n\r\n\r\n```java\r\npublic class Main implements StingAwareApplication {\r\n\r\n\tprivate MetaDataEntry<Stinger>[] metaData;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tWeld weld = new Weld();\r\n\t\tWeldContainer container = weld.initialize();\r\n\r\n\t\tWeldComponentStinger stinger = new WeldComponentStinger(container);\r\n\t\tMain mainApp = new Main();\r\n\t\tstinger.bind(mainApp);\r\n\t\tPanel panel = new Panel();\r\n\t\tpanel.test();\r\n\t}\r\n\r\n\tpublic Stinger getMetaData(MetaDataKey<Stinger> key) {\r\n        return key.get(metaData);\r\n    }\r\n\r\n    public void setMetaData(final MetaDataKey<Stinger> key, final Stinger object) {\r\n        metaData = key.set(metaData, object);\r\n    }\r\n}\r\n```\r\n\r\n## Versioning\r\n\r\nHedgehog will be maintained under the Semantic Versioning guidelines as much as possible.\r\n\r\nReleases will be numbered with the follow format:\r\n\r\n`<major>.<minor>.<patch>`\r\n\r\nAnd constructed with the following guidelines:\r\n\r\n* Breaking backward compatibility bumps the major\r\n* New additions without breaking backward compatibility bumps the minor\r\n* Bug fixes and misc changes bump the patch\r\n\r\nFor more information on SemVer, please visit http://semver.org.\r\n\r\n## Issues \r\n\r\nAny issue or improvement idea is welcome, also pull-requests are happily accepted.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}